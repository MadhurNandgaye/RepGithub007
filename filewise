public void Run()
{
    var now = DateTime.UtcNow;
    var recentWindowStart = now.AddHours(-_lookbackHours);
    var historicalWindowStart = now.AddHours(-2 * _lookbackHours);

    // Query unique worker counts (synchronously)
    var recentCounts = _workerRepository
        .GetUniqueWorkerCountsAsync(recentWindowStart, now)
        .GetAwaiter().GetResult();

    var historicalCounts = _workerRepository
        .GetUniqueWorkerCountsAsync(historicalWindowStart, now)
        .GetAwaiter().GetResult();

    foreach (var workerType in historicalCounts.Keys)
    {
        if (!recentCounts.ContainsKey(workerType)) continue;

        var recent = recentCounts[workerType];
        var historical = historicalCounts[workerType];

        if (historical == 0) continue;

        var dropPercent = (historical - recent) * 100.0 / historical;

        if (dropPercent >= _thresholdPercent && recent < historical)
        {
            _logger.LogWarning(
                "Worker drop detected for {WorkerType}: {Historical} -> {Recent} ({DropPercent}%)",
                workerType, historical, recent, dropPercent);

            // Call email alert synchronously
            _alertService.SendEmailAsync(
                subject: $"[ALERT] Worker drop detected for {workerType}",
                body: $"WorkerType: {workerType}\n" +
                      $"Historical ({2 * _lookbackHours}h): {historical}\n" +
                      $"Recent ({_lookbackHours}h): {recent}\n" +
                      $"Drop: {dropPercent:F2}%"
            ).GetAwaiter().GetResult();
        }
    }
}




CREATE PROCEDURE sp_get_unique_worker_counts
    @StartTime DATETIME,
    @EndTime DATETIME
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        WorkerType,
        COUNT(DISTINCT WorkerId) AS UniqueWorkerCount
    FROM WorkerActivity
    WHERE ActivityTime BETWEEN @StartTime AND @EndTime
    GROUP BY WorkerType;
END





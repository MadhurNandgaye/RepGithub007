public async Task MonitorWorkersAsync(
    IWorkerRepository workerRepository,
    ILogger logger,
    IEmailService emailService,
    int lookbackHours,
    double thresholdPercent)
{
    try
    {
        var end = DateTime.UtcNow;
        var startRecent = end.AddHours(-lookbackHours);
        var startHistorical = end.AddHours(-(lookbackHours * 2));

        // Get counts
        var recentCounts = await workerRepository.GetUniqueWorkerCountsAsync(startRecent, end);
        var historicalCounts = await workerRepository.GetUniqueWorkerCountsAsync(startHistorical, startRecent);

        foreach (var workerType in historicalCounts.Keys)
        {
            if (recentCounts.TryGetValue(workerType, out var recentCount))
            {
                var historicalCount = historicalCounts[workerType];
                if (historicalCount == 0) continue;

                var dropPercent = ((double)(historicalCount - recentCount) / historicalCount) * 100;

                if (dropPercent >= thresholdPercent)
                {
                    var message = $"⚠️ Worker type '{workerType}' dropped by {dropPercent:F2}% " +
                                  $"(Recent: {recentCount}, Historical: {historicalCount})";

                    logger.LogWarning(message);

                    // Send email alert
                    await emailService.SendEmailAsync(
                        subject: "Worker Drop Alert",
                        body: message,
                        to: "alerts@company.com"   // you can move to appsettings
                    );
                }
            }
        }
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "Error occurred while monitoring workers.");
    }
}




CREATE PROCEDURE sp_get_unique_worker_counts
    @StartTime DATETIME,
    @EndTime DATETIME
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        WorkerType,
        COUNT(DISTINCT WorkerId) AS UniqueWorkerCount
    FROM WorkerActivity
    WHERE ActivityTime BETWEEN @StartTime AND @EndTime
    GROUP BY WorkerType;
END





public class WorkerMonitor
{
    private readonly ILogger<WorkerMonitor> _logger;
    private readonly IWorkerRepository _workerRepository;
    private readonly IAlertService _alertService;
    private readonly int _lookbackHours;
    private readonly double _thresholdPercent;

    public WorkerMonitor(
        ILogger<WorkerMonitor> logger,
        IWorkerRepository workerRepository,
        IAlertService alertService,
        IConfiguration config)
    {
        _logger = logger;
        _workerRepository = workerRepository;
        _alertService = alertService;
        _lookbackHours = config.GetValue<int>("WorkerMonitor:LookbackHours", 2);
        _thresholdPercent = config.GetValue<double>("WorkerMonitor:ThresholdPercent", 10.0);
    }

    public async Task RunAsync(CancellationToken cancellationToken)
    {
        var now = DateTime.UtcNow;
        var recentWindowStart = now.AddHours(-_lookbackHours);
        var historicalWindowStart = now.AddHours(-2 * _lookbackHours);

        // Query unique worker counts
        var recentCounts = await _workerRepository.GetUniqueWorkerCountsAsync(recentWindowStart, now, cancellationToken);
        var historicalCounts = await _workerRepository.GetUniqueWorkerCountsAsync(historicalWindowStart, now, cancellationToken);

        foreach (var workerType in historicalCounts.Keys)
        {
            if (!recentCounts.ContainsKey(workerType)) continue;

            var recent = recentCounts[workerType];
            var historical = historicalCounts[workerType];

            if (historical == 0) continue;

            var dropPercent = (historical - recent) * 100.0 / historical;

            if (dropPercent >= _thresholdPercent && recent < historical)
            {
                _logger.LogWarning("Worker drop detected for {WorkerType}: {Historical} -> {Recent} ({DropPercent}%)",
                    workerType, historical, recent, dropPercent);

                await _alertService.SendEmailAsync(
                    subject: $"[ALERT] Worker drop detected for {workerType}",
                    body: $"WorkerType: {workerType}\n" +
                          $"Historical ({2 * _lookbackHours}h): {historical}\n" +
                          $"Recent ({_lookbackHours}h): {recent}\n" +
                          $"Drop: {dropPercent:F2}%"
                );
            }
        }
    }
}




{
  "WorkerMonitor": {
    "LookbackHours": 2,       // X
    "ThresholdPercent": 10,   // Y
    "CheckIntervalMinutes": 30
  }
}

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import axios from 'axios';
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Alert,
  AlertTitle,
  CssBaseline,
  ThemeProvider,
  createTheme,
  CircularProgress,
  Tooltip,
  Button,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Grid,
  InputAdornment,
} from '@mui/material';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import WarningAmberIcon from '@mui/icons-material/WarningAmber';
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import HorizontalRuleIcon from '@mui/icons-material/HorizontalRule';
import AnalyticsIcon from '@mui/icons-material/Analytics';
import BugReportIcon from '@mui/icons-material/BugReport';
import MemoryIcon from '@mui/icons-material/Memory';
import DeveloperBoardIcon from '@mui/icons-material/DeveloperBoard';
import DashboardIcon from '@mui/icons-material/Dashboard';
import TableChartIcon from '@mui/icons-material/TableChart';
import NotificationsIcon from '@mui/icons-material/Notifications';
import AutoFixHighIcon from '@mui/icons-material/AutoFixHigh';
import PersonIcon from '@mui/icons-material/Person';
import { Brightness4 as Brightness4Icon, Brightness7 as Brightness7Icon } from '@mui/icons-material';
import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
import FilterListIcon from '@mui/icons-material/FilterList';


import {
  AreaChart,
  Area,
  ResponsiveContainer,
  Tooltip as RechartsTooltip,
  XAxis,
  YAxis,
} from 'recharts';
import { blueGrey } from '@mui/material/colors';


/**
 * Interface for the filters that can be applied to the data fetch.
 */
interface DataFilters {
  project?: string;
  server?: string;
  startDate?: Date | null;
  endDate?: Date | null;
}

/**
 * Interface for the structure of the data records.
 * This will now represent a simplified book item from Google Books API.
 */
interface BookResult {
  id: string;
  title: string;
  authors: string;
  publishedDate: string;
  description: string;
  thumbnail: string;
}

/**
 * Interface for the structure of an Endpoint.
 * This will be simulated based on the success of the Google Books API call.
 */
interface Endpoint {
  id: string;
  name: string;
  url: string;
  baselineLatency: number;
  internalLatency: number | null;
  externalLatency: number | null;
  internalHealth: 'Red' | 'Yellow' | 'Green' | 'Unknown';
  externalHealth: 'Red' | 'Yellow' | 'Green' | 'Unknown';
  lastChecked: string | null;
  internalLatencyHistory: { value: number; timestamp: Date }[];
  externalLatencyHistory: { value: number; timestamp: Date }[];
  errorRate: number;
  traffic: number;
  errorRateHistory: { value: number; timestamp: Date }[];
  serverName: string;
  projectName: string;
}

// Google Books API base URL
const GOOGLE_BOOKS_API_URL = 'https://www.googleapis.com/books/v1/volumes';

/**
 * Fetches data from the Google Books API.
 * The 'project' filter will be used as the search query.
 *
 * @param {DataFilters} filters - An object containing filters for the data.
 * @returns {Promise<BookResult[]>} A promise that resolves with an array of BookResult objects.
 */
const fetchFilteredDataFromAPI = async (filters: DataFilters): Promise<BookResult[]> => {
  const query = filters.project || 'programming'; // Default search query
  const maxResults = 10;
  const apiUrl = `${GOOGLE_BOOKS_API_URL}?q=${encodeURIComponent(query)}&maxResults=${maxResults}`;

  try {
    const response = await axios.get(apiUrl);
    console.log(`Google Books API call to ${apiUrl} successful. Response:`, response.data);

    if (response.data && response.data.items) {
      return response.data.items.map((item: any) => ({
        id: item.id,
        title: item.volumeInfo.title || 'N/A',
        authors: item.volumeInfo.authors ? item.volumeInfo.authors.join(', ') : 'N/A',
        publishedDate: item.volumeInfo.publishedDate || 'N/A',
        description: item.volumeInfo.description ? item.volumeInfo.description.substring(0, 100) + '...' : 'N/A',
        thumbnail: item.volumeInfo.imageLinks?.thumbnail || 'https://placehold.co/60x80/EEEEEE/AAAAAA?text=No+Image',
      }));
    }
    return [];
  } catch (error) {
    console.error(`Error fetching data from Google Books API:`, error);
    return [];
  }
};


const lightTheme = createTheme({
  typography: {
    fontFamily: 'Inter, sans-serif',
    h4: {
      fontWeight: 700,
      marginBottom: '1rem',
    },
    h5: {
      fontWeight: 600,
      marginBottom: '0.8rem',
    },
    h6: {
      fontWeight: 500,
    },
  },
  palette: {
    mode: 'light',
    primary: {
      main: '#1976d2',
    },
    secondary: {
      main: '#dc004e',
    },
    success: {
      main: '#4caf50',
    },
    warning: {
      main: '#ff9800',
    },
    error: {
      main: '#f44336',
    },
    background: {
      default: '#f4f6f8',
      paper: '#ffffff',
    },
    grey: {
      300: '#e0e0e0',
      500: '#9e9e9e',
    },
  },
  components: {
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 4px 20px rgba(0,0,0,0.05)',
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          fontWeight: 600,
          minWidth: 80,
          justifyContent: 'center',
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        head: {
          fontWeight: 600,
          backgroundColor: '#e0e0e0',
        },
      },
    },
  },
});

const darkTheme = createTheme({
  typography: {
    fontFamily: 'Inter, sans-serif',
    h4: {
      fontWeight: 700,
      marginBottom: '1rem',
    },
    h5: {
      fontWeight: 600,
      marginBottom: '0.8rem',
    },
    h6: {
      fontWeight: 500,
    },
  },
  palette: {
    mode: 'dark',
    primary: {
      main: '#90caf9',
    },
    secondary: {
      main: '#f48fb1',
    },
    success: {
      main: '#81c784',
    },
    warning: {
      main: '#ffb74d',
    },
    error: {
      main: '#e57373',
    },
    background: {
      default: '#121212',
      paper: '#1e1e1e',
    },
    grey: {
      300: '#424242',
      500: '#bdbdbd',
    },
  },
  components: {
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 4px 20px rgba(0,0,0,0.3)',
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          fontWeight: 600,
          minWidth: 80,
          justifyContent: 'center',
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        head: {
          fontWeight: 600,
          backgroundColor: '#333333',
        },
      },
    },
    MuiIconButton: {
      styleOverrides: {
        root: {
          color: '#ffffff',
        },
      },
    },
    MuiInputAdornment: {
      styleOverrides: {
        root: {
          color: '#ffffff',
        },
      },
    },
    // Added style overrides for TextField to attempt to style native date input icon
    MuiTextField: {
      styleOverrides: {
        root: {
          // Target the native calendar picker indicator for WebKit browsers
          '& .MuiInputBase-input[type="date"]::-webkit-calendar-picker-indicator': {
            filter: 'invert(1)', // Invert color for dark theme
          },
          // Ensure the input text color is white in dark theme
          '& .MuiInputBase-input[type="date"]': {
            color: '#ffffff',
          },
        },
      },
    },
  },
});

// Dummy data generation for initial filter options (for UI functionality)
// This data is ONLY used to populate the dropdowns, not the tables.
const generateInitialFilterOptions = (): { projectNames: string[]; serverNames: string[] } => {
  const projectNames = ['Programming', 'History', 'Science', 'Fiction']; // Example categories for books
  const serverNames = [ // Example servers, less relevant for Books API but kept for UI structure
    'Server Alpha', 'Server Beta', 'Server Gamma',
  ];
  return { projectNames, serverNames };
};

const initialFilterOptions = generateInitialFilterOptions();


const getTrend = (history: { value: number; timestamp: Date }[]): 'improving' | 'degrading' | 'stable' | 'unknown' => {
  if (history.length < 2) {
    return 'unknown';
  }

  const current = history[history.length - 1].value;
  const prev = history[history.length - 2].value;

  if (current < prev * 0.9) {
    return 'improving';
  } else if (current > prev * 1.1) {
    return 'degrading';
  } else {
    return 'stable';
  }
};

interface LatencyBarProps {
  currentLatency: number;
  baselineLatency: number;
  health: 'Red' | 'Yellow' | 'Green' | 'Unknown';
  themeMode: 'light' | 'dark';
}

const LatencyBar: React.FC<LatencyBarProps> = ({ currentLatency, baselineLatency, health, themeMode }) => {
  const currentTheme = themeMode === 'light' ? lightTheme : darkTheme;

  let circleColor: string;
  switch (health) {
    case 'Green':
      circleColor = currentTheme.palette.success.main;
      break;
    case 'Yellow':
      circleColor = currentTheme.palette.warning.main;
      break;
    case 'Red':
      circleColor = currentTheme.palette.error.main;
      break;
    default:
      circleColor = currentTheme.palette.grey[500];
      break;
  }

  const ratio = currentLatency / baselineLatency;
  let size = 12;
  if (ratio > 1.5) {
    size = 18;
  } else if (ratio < 0.8) {
    size = 10;
  }

  return (
    <Tooltip title={`Current: ${currentLatency}ms (Baseline: ${baselineLatency}ms)`}>
      <Box
        sx={{
          width: size,
          height: size,
          backgroundColor: circleColor,
          borderRadius: '50%',
          display: 'inline-block',
          verticalAlign: 'middle',
          ml: 1,
          transition: 'all 0.3s ease-in-out',
        }}
      />
    </Tooltip>
  );
};

const OverallSummaryStatus: React.FC<{ totalEndpoints: number; healthyEndpoints: number; yellowEndpoints: number; redEndpoints: number; overallStatus: string }> = ({ totalEndpoints, healthyEndpoints, yellowEndpoints, redEndpoints, overallStatus }) => (
  <Card>
    <CardContent>
      <Typography variant="h5" gutterBottom>
        Overall System Status
      </Typography>
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
        <Chip
          label={overallStatus}
          color={
            overallStatus === 'Operational'
              ? 'success'
              : overallStatus === 'Degraded'
              ? 'warning'
              : 'error'
          }
          sx={{ fontSize: '1rem', padding: '0.5rem 1rem', height: 'auto' }}
        />
        <Typography variant="body1">
          {overallStatus === 'Operational' && 'All monitored endpoints are currently healthy and performing within expected baselines.'}
          {overallStatus === 'Degraded' && `Some endpoints (${yellowEndpoints} yellow) are experiencing degraded performance. Further investigation may be needed.`}
          {overallStatus === 'Critical' && `Critical issues detected! ${redEndpoints} endpoints are experiencing severe problems. Immediate attention required!`}
        </Typography>
      </Box>
      <Typography variant="body2" color="textSecondary">
        Total Endpoints Monitored: {totalEndpoints} | Healthy: {healthyEndpoints} | Degraded: {yellowEndpoints} | Critical: {redEndpoints}
      </Typography>
    </CardContent>
  </Card>
);

const IndividualEndpointStatusTable: React.FC<{ endpoints: Endpoint[]; getStatusProps: Function; getTrendIcon: Function; appliedStartDate: Date | null; appliedEndDate: Date | null; themeMode: 'light' | 'dark' }> = ({ endpoints, getStatusProps, getTrendIcon, appliedStartDate, appliedEndDate, themeMode }) => {
  const filteredEndpoints = useMemo(() => {
    if (!appliedStartDate || !appliedEndDate) {
      return endpoints;
    }
    const start = appliedStartDate;
    const end = appliedEndDate;

    return endpoints.filter(endpoint =>
      endpoint.lastChecked &&
      new Date(endpoint.lastChecked).getTime() >= start.getTime() &&
      new Date(endpoint.lastChecked).getTime() <= end.getTime()
    );
  }, [endpoints, appliedStartDate, appliedEndDate]);

  const getErrorRateColor = (errorCount: number) => {
    const currentTheme = themeMode === 'light' ? lightTheme : darkTheme;
    if (errorCount > 10) return currentTheme.palette.error.main;
    if (errorCount > 3) return currentTheme.palette.warning.main;
    return currentTheme.palette.success.main;
  };

  const getTrafficColor = (traffic: number) => {
    const currentTheme = themeMode === 'light' ? lightTheme : darkTheme;
    if (traffic > 200) return currentTheme.palette.primary.main;
    if (traffic < 50) return currentTheme.palette.warning.main;
    return currentTheme.palette.success.main;
  };

  const calculateAverage = (history: { value: number; timestamp: Date }[], startDate: Date | null, endDate: Date | null) => {
    let filteredHistory = history;
    if (startDate && endDate) {
      filteredHistory = history.filter(point =>
        point.timestamp.getTime() >= startDate.getTime() &&
        point.timestamp.getTime() <= endDate.getTime()
      );
    }

    if (filteredHistory.length === 0) return 'N/A';
    const sum = filteredHistory.reduce((acc, val) => acc + val.value, 0);
    return (sum / filteredHistory.length).toFixed(1);
  };

  return (
    <Card>
      <CardContent>
        <Typography variant="h5" gutterBottom>
          Individual Endpoint Health Status
        </Typography>
        <TableContainer component={Paper} sx={{ borderRadius: 2 }}>
          <Table stickyHeader aria-label="endpoint health table">
            <TableHead><TableRow>
                <TableCell sx={{ minWidth: '25px' }}>No.</TableCell>
                <TableCell sx={{ minWidth: '150px' }}>Endpoint Name</TableCell>
                <TableCell align="center" sx={{ minWidth: '50px' }}>Internal Health</TableCell>
                <TableCell align="center" sx={{ minWidth: '50px' }}>External Health</TableCell>
                <TableCell align="right" sx={{ minWidth: '30px' }}>Internal Latency (ms)</TableCell>
                <TableCell align="right" sx={{ minWidth: '60px' }}>External Latency (ms)</TableCell>
                <TableCell align="right" sx={{ minWidth: '80px' }}>Baseline (ms)</TableCell>
                <TableCell align="right" sx={{ minWidth: '100px' }}>Current Errors</TableCell>
                {/* Removed Avg Errors column */}
                <TableCell align="right" sx={{ minWidth: '80px' }}>Traffic (RPS)</TableCell>
                <TableCell align="center" sx={{ minWidth: '100px' }}>Last Checked</TableCell>
              </TableRow></TableHead>
            <TableBody>{filteredEndpoints.map((endpoint, index) => (
                <TableRow key={endpoint.id}>
                  <TableCell>{index + 1}</TableCell>
                  <TableCell component="th" scope="row">{endpoint.name}</TableCell>
                  <TableCell align="center"><Chip {...getStatusProps(endpoint.internalHealth)} size="small" sx={{ width: 50, fontSize: '0.65rem' }} /></TableCell>
                  <TableCell align="center"><Chip {...getStatusProps(endpoint.externalHealth)} size="small" sx={{ width: 50, fontSize: '0.65rem' }} /></TableCell>
                  <TableCell align="right">
                    <Box display="flex" alignItems="center" justifyContent="flex-end">
                      <Typography variant="body2" sx={{ mr: 1, minWidth: '20px', textAlign: 'right', fontSize: '0.75rem' }}>{endpoint.internalLatency !== null ? endpoint.internalLatency : 'N/A'}</Typography>
                      {endpoint.internalLatency !== null && (<LatencyBar currentLatency={endpoint.internalLatency} baselineLatency={endpoint.baselineLatency} health={endpoint.internalHealth} themeMode={themeMode} />)}
                      {/* Ensure internalLatencyHistory is an array of HistoryDataPoint for getTrend */}
                      {endpoint.internalLatencyHistory && getTrendIcon(getTrend(endpoint.internalLatencyHistory.map(h => ({ ...h, timestamp: h.timestamp instanceof Date ? h.timestamp : new Date(h.timestamp) })) ))}
                    </Box>
                  </TableCell>
                  <TableCell align="right">
                    <Box display="flex" alignItems="center" justifyContent="flex-end">
                      <Typography variant="body2" sx={{ mr: 1, minWidth: '20px', textAlign: 'right', fontSize: '0.75rem' }}>{endpoint.externalLatency !== null ? endpoint.externalLatency : 'N/A'}</Typography>
                      {endpoint.externalLatency !== null && (<LatencyBar currentLatency={endpoint.externalLatency} baselineLatency={endpoint.baselineLatency} health={endpoint.externalHealth} themeMode={themeMode} />)}
                      {/* Ensure externalLatencyHistory is an array of HistoryDataPoint for getTrend */}
                      {endpoint.externalLatencyHistory && getTrendIcon(getTrend(endpoint.externalLatencyHistory.map(h => ({ ...h, timestamp: h.timestamp instanceof Date ? h.timestamp : new Date(h.timestamp) })) ))}
                    </Box>
                  </TableCell>
                  <TableCell align="right">{endpoint.baselineLatency}</TableCell>
                  <TableCell align="right" sx={{ color: getErrorRateColor(endpoint.errorRate), fontWeight: 500 }}>{endpoint.errorRate}</TableCell>
                  {/* Removed Avg Errors Cell */}
                  <TableCell align="right" sx={{ color: getTrafficColor(endpoint.traffic), fontWeight: 500 }}>{endpoint.traffic}</TableCell>
                  <TableCell align="center">{endpoint.lastChecked ? new Date(endpoint.lastChecked).toLocaleString() : 'N/A'}</TableCell>
                </TableRow>
              ))}</TableBody>
          </Table>
        </TableContainer>
      </CardContent>
    </Card>
  );
};

const NotificationAlerting: React.FC = () => (
  <Card>
    <CardContent>
      <Typography variant="h5" gutterBottom>
        Notification & Alerting
      </Typography>
      <Typography variant="body1" paragraph>
        This Logic App can be configured to send summary status and alerts via various notification mechanisms based on defined thresholds:
      </Typography>
      <Alert severity="info" sx={{ mb: 1 }}>
        <AlertTitle>Email Notifications</AlertTitle>
        Automated emails can be sent to designated recipients or distribution lists for critical alerts (Red status) and daily/weekly performance summaries. This ensures key stakeholders are immediately informed of incidents.
      </Alert>
      <Alert severity="info" sx={{ mb: 1 }}>
        <AlertTitle>RSS Feed</AlertTitle>
        A dedicated RSS feed can be published, allowing users or other monitoring systems to subscribe and receive real-time updates on endpoint health changes, providing a low-friction subscription model.
      </Alert>
      <Alert severity="info">
        <AlertTitle>Subscription-based Notifications</AlertTitle>
        Integration with popular communication and incident management platforms (e.g., Slack, Microsoft Teams, PagerDuty, Opsgenie) can be established to push alerts directly to relevant channels or on-call teams for rapid response.
      </Alert>
    </CardContent>
  </Card>
);

const AutomatedSelfHealingActions: React.FC = () => (
  <Card>
    <CardContent>
      <Typography variant="h5" gutterBottom>
        Automated Self-Healing Actions
      </Typography>
      <Typography variant="body1" paragraph>
        Under predefined conditions (e.g., an endpoint remains 'Red' for more than 5 minutes), this Logic App can trigger automated self-healing resolutions to mitigate issues without manual intervention. These actions are crucial for maintaining application availability:
      </Typography>
      <Alert severity="warning" sx={{ mb: 1 }}>
        <AlertTitle>Auto-Restart Application Service</AlertTitle>
        If an endpoint consistently shows a 'Red' status due to application-level errors (e.g., unhandled exceptions, memory leaks), the Logic App can automatically trigger a restart of the associated application service to clear its state.
      </Alert>
      <Alert severity="warning" sx={{ mb: 1 }}>
        <AlertTitle>IIS App Pool Recycle</AlertTitle>
        For web applications hosted on IIS, if an endpoint becomes unresponsive or shows degraded performance, the Logic App can initiate an.automatic recycle of the relevant IIS application pool, often resolving minor resource contention issues.
      </Alert>
      <Alert severity="warning">
        <AlertTitle>Failover to Secondary Instance</AlertTitle>
        In a multi-instance or high-availability setup, if a primary instance's API endpoint consistently fails, the Logic App could trigger an automated failover to a healthy secondary instance, redirecting traffic and minimizing downtime.
      </Alert>
      <Typography variant="body2" color="textSecondary" sx={{ mt: 2 }}>
        Note: The specific automation steps would involve secure API integrations with cloud providers' APIs (e.g., Azure Resource Manager, AWS CloudWatch/Lambda, GCP Cloud Functions) or on-premise orchestration tools and runbooks.
      </Typography>
    </CardContent>
  </Card>
);

interface User {
  id: string;
  name: string;
  email: string;
  role: string;
  lastLogin: Date;
  department: string;
  contact: string;
}

const loggedInUser: User = {
  id: 'user-123',
  name: 'John Doe',
  email: 'john.doe@example.com',
  role: 'Administrator',
  lastLogin: new Date('2025-07-10T12:00:00Z'),
  department: 'IT Operations',
  contact: '+1-555-123-4567',
};

const UserProfileTable: React.FC = () => {
  return (
    <Card>
      <CardContent>
        <Typography variant="h5" gutterBottom>
          My Profile
        </Typography>
        <TableContainer component={Paper} sx={{ borderRadius: 2 }}>
          <Table aria-label="user profile table">
            <TableBody><TableRow><TableCell component="th" scope="row" sx={{ fontWeight: 'bold', width: '30%' }}>User ID</TableCell><TableCell>{loggedInUser.id}</TableCell></TableRow>
              <TableRow><TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>Name</TableCell><TableCell>{loggedInUser.name}</TableCell></TableRow>
              <TableRow><TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>Email</TableCell><TableCell>{loggedInUser.email}</TableCell></TableRow>
              <TableRow><TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>Role</TableCell><TableCell>{loggedInUser.role}</TableCell></TableRow>
              <TableRow><TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>Department</TableCell><TableCell>{loggedInUser.department}</TableCell></TableRow>
              <TableRow><TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>Contact</TableCell><TableCell>{loggedInUser.contact}</TableCell></TableRow>
              <TableRow><TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>Last Login</TableCell><TableCell>{loggedInUser.lastLogin.toLocaleString()}</TableCell></TableRow>
            </TableBody>
          </Table>
        </TableContainer>
      </CardContent>
    </Card>
  );
};


interface SidebarNavProps {
  onSelectView: (view: string) => void;
  activeView: string;
  themeMode: 'dark' | 'light';
  onLogoutRequest: () => void;
}

const SidebarNav: React.FC<SidebarNavProps> = ({ onSelectView, activeView, themeMode, onLogoutRequest }) => {
  const currentTheme = themeMode === 'light' ? lightTheme : darkTheme;
  const navItems = [
    { id: 'table', text: 'Endpoint Table', icon: <TableChartIcon /> },
    { id: 'error_trends', text: 'Error Trends', icon: <DeveloperBoardIcon /> },
    { id: 'summary', text: 'Overall Summary', icon: <DashboardIcon /> },
    { id: 'filtered_data', text: 'Filtered Data', icon: <FilterListIcon /> }, // New nav item
    { id: 'notifications', text: 'Notifications', icon: <NotificationsIcon /> },
    { id: 'selfHealing', text: 'Self-Healing', icon: <AutoFixHighIcon /> },
    { id: 'user_profile', text: 'User Profile', icon: <PersonIcon /> },
  ];

  return (
    <Box sx={{ width: '154px', flexShrink: 0, bgcolor: 'background.paper', borderRight: 1, borderColor: 'divider', height: '100vh', position: 'sticky', top: 0, p: 1 }}>
      <Typography variant="subtitle1" sx={{ mb: 2, fontWeight: 'bold', color: currentTheme.palette.primary.main, fontSize: '1rem', justifyContent: 'center', textAlign: 'center' }}>
        Views
      </Typography>
      <List>
        {navItems.map((item) => (
          <ListItem key={item.id} disablePadding>
            <ListItemButton
              selected={activeView === item.id}
              onClick={() => onSelectView(item.id)}
              sx={{
                borderRadius: 2,
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                py: 1.5,
                '&.Mui-selected': {
                  backgroundColor: currentTheme.palette.primary.light,
                  color: currentTheme.palette.primary.contrastText,
                  '& .MuiListItemIcon-root': { color: currentTheme.palette.primary.contrastText }
                },
                '&:hover': {
                  backgroundColor: currentTheme.palette.action.hover,
                },
                color: currentTheme.palette.text.primary,
              }}
            >
              <ListItemIcon sx={{ minWidth: 40, color: 'inherit', mb: 0.5 }}>
                {item.icon}
              </ListItemIcon>
              <ListItemText
                primary={
                  <Typography variant="caption" sx={{ fontSize: '0.75rem', textAlign: 'center', lineHeight: 1.2, color: 'inherit' }}>
                    {item.text}
                  </Typography>
                }
                disableTypography={true}
              />
            </ListItemButton>
          </ListItem>
        ))}
      </List>
      <Box sx={{ mt: 3, px: 1 }}>
        <Button
          variant="outlined"
          color="inherit"
          onClick={onLogoutRequest}
          fullWidth
          sx={{ borderRadius: 2 }}
        >
          Logout
        </Button>
      </Box>
    </Box>
  );
};

interface MiniTrendGraphProps {
  history: { value: number; timestamp: Date }[];
  label: string;
  unit: string;
  color: string;
  appliedStartDate: Date | null;
  appliedEndDate: Date | null;
  themeMode: 'light' | 'dark';
}

const MiniTrendGraph: React.FC<MiniTrendGraphProps> = ({ history, label, unit, color, appliedStartDate, appliedEndDate, themeMode }) => {
  const currentTheme = themeMode === 'light' ? lightTheme : darkTheme;
  const filteredHistory = useMemo(() => {
    if (!appliedStartDate || !appliedEndDate) {
      return history;
    }
    const start = appliedStartDate;
    const end = appliedEndDate;

    return history.filter(point =>
      point.timestamp.getTime() >= start.getTime() &&
      point.timestamp.getTime() <= end.getTime()
    );
  }, [history, appliedStartDate, appliedEndDate]);

  if (filteredHistory.length === 0) {
    return (
      <Box sx={{ width: '100%', height: 100, display: 'flex', alignItems: 'center', justifyContent: 'center', color: 'text.secondary', border: '1px dashed', borderColor: currentTheme.palette.grey[400], borderRadius: 2, p: 2 }}>
        <Typography variant="body2">No data available for selected date.</Typography>
      </Box>
    );
  }

  const chartData = filteredHistory.map(point => ({
    value: point.value,
    date: point.timestamp.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }),
    fullDate: point.timestamp.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }),
  }));

  return (
    <Box sx={{ width: '100%', height: 100 }}>
      <ResponsiveContainer width="100%" height="100%">
        <AreaChart data={chartData} margin={{ top: 5, right: 0, left: 0, bottom: 5 }}>
          <defs>
            <linearGradient id={`color${label}`} x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor={color} stopOpacity={0.8}/>
              <stop offset="95%" stopColor={currentTheme.palette.grey[300]} stopOpacity={0}/>
            </linearGradient>
          </defs>
          <RechartsTooltip
            labelFormatter={(labelValue, payload) => {
              if (payload && payload.length > 0 && payload[0].payload && payload[0].payload.fullDate) {
                return `Date: ${payload[0].payload.fullDate}`;
              }
              return `Date: ${labelValue}`;
            }}
            formatter={(value) => [`${value} ${unit}`, label]}
            contentStyle={{ backgroundColor: currentTheme.palette.background.paper, border: `1px solid ${currentTheme.palette.divider}` }}
            labelStyle={{ color: currentTheme.palette.text.primary }}
            itemStyle={{ color: currentTheme.palette.text.secondary }}
          />
          <Area type="monotone" dataKey="value" stroke={color} fillOpacity={1} fill={`url(#color${label})`} strokeWidth={2} dot={false} />
        </AreaChart>
      </ResponsiveContainer>
    </Box>
  );
};

interface ErrorRateTrendsProps {
  endpoints: Endpoint[];
  appliedStartDate: Date | null;
  appliedEndDate: Date | null;
  themeMode: 'light' | 'dark';
}

const ErrorRateTrends: React.FC<ErrorRateTrendsProps> = ({ endpoints, appliedStartDate, appliedEndDate, themeMode }) => {
  const currentTheme = themeMode === 'light' ? lightTheme : darkTheme;
  return (
    <Card>
      <CardContent>
        <Typography variant="h5" gutterBottom>
          Error Count Trends Over Time
        </Typography>
        <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: 3 }}>
          {endpoints.map(endpoint => (
            <Card key={endpoint.id} variant="outlined" sx={{ borderRadius: 2 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom sx={{ mb: 1 }}>
                  {endpoint.name}
                </Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  Server: {endpoint.serverName}
                </Typography>
                <MiniTrendGraph
                  history={endpoint.errorRateHistory.map(h => ({ ...h, timestamp: h.timestamp instanceof Date ? h.timestamp : new Date(h.timestamp) }))} // Convert timestamp string to Date
                  label="Errors"
                  unit="errors"
                  color={currentTheme.palette.error.main}
                  appliedStartDate={appliedStartDate}
                  appliedEndDate={appliedEndDate}
                  themeMode={themeMode}
                />
                <Typography variant="body2" component="span" sx={{ mt: 1 }}>
                  Current Errors: <Chip label={`${endpoint.errorRate} errors`} size="small" color={endpoint.errorRate > 10 ? 'error' : endpoint.errorRate > 3 ? 'warning' : 'success'} />
                </Typography>
              </CardContent>
            </Card>
          ))}
        </Box>
      </CardContent>
    </Card>
  );
};

interface LoginPageProps {
  onLoginSuccess: () => void;
  themeMode: 'light' | 'dark';
}

// Helper to convert hex to rgba
const hexToRgba = (hex: string, alpha: number) => {
  let r = 0, g = 0, b = 0;
  // Ensure hex is a string
  if (typeof hex !== 'string') {
    hex = String(hex);
  }
  // Handle #RRGGBB or #RGB
  if (hex.length === 7) {
    r = parseInt(hex.substring(1, 3), 16);
    g = parseInt(hex.substring(3, 5), 16);
    b = parseInt(hex.substring(5, 7), 16);
  } else if (hex.length === 4) {
    r = parseInt(hex[1] + hex[1], 16);
    g = parseInt(hex[2] + hex[2], 16);
    b = parseInt(hex[3] + hex[3], 16);
  }
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
};

const LoginPage: React.FC<LoginPageProps> = ({ onLoginSuccess, themeMode }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const currentTheme = useMemo(() => themeMode === 'light' ? lightTheme : darkTheme, [themeMode]);

  const handleLogin = (event: React.FormEvent) => {
    event.preventDefault();
    setError('');
    if (username === 'user' && password === 'password') {
      onLoginSuccess();
    } else {
      setError('Invalid username or password');
    }
  };

  return (
    <Container component="main" maxWidth="xs" sx={{
      height: '100vh',
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      bgcolor: currentTheme.palette.background.default,
      p: 2,
    }}>
      <Card sx={{
        p: { xs: 3, sm: 4 },
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        borderRadius: 3,
        boxShadow: 6,
        width: '100%',
        maxWidth: 400,
        bgcolor: hexToRgba(currentTheme.palette.primary.main, 0.3), // Transparent primary color
      }}>
        <Box sx={{ mb: 3, textAlign: 'center' }}>
          <Typography component="h1" variant="h4" sx={{ fontWeight: 'bold', color: currentTheme.palette.primary.contrastText }}>
            API Dashboard
          </Typography>
          <Typography variant="subtitle1" sx={{ color: currentTheme.palette.primary.contrastText }}>
            Sign in to continue
          </Typography>
        </Box>
        <Box component="form" onSubmit={handleLogin} noValidate sx={{ width: '100%' }}>
          <TextField
            margin="normal"
            required
            fullWidth
            id="username"
            label="Username"
            name="username"
            autoComplete="username"
            autoFocus
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            sx={{ mb: 2 }}
          />
          <TextField
            margin="normal"
            required
            fullWidth
            name="password"
            label="Password"
            type="password"
            id="password"
            autoComplete="current-password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            sx={{ mb: 3 }}
          />
          {error && (
            <Alert severity="error" sx={{ mt: 2, mb: 1, width: '100%' }}>
              {error}
            </Alert>
          )}
          <Button
            type="submit"
            fullWidth
            variant="contained"
            size="large"
            sx={{ mt: 3, mb: 2, borderRadius: 2 }}
          >
            Sign In
          </Button>
        </Box>
      </Card>
    </Container>
  );
};

// New FilteredDataDisplay Component
interface FilteredDataDisplayProps {
  projectFilter: string;
  serverNameFilter: string;
  appliedStartDate: Date | null;
  appliedEndDate: Date | null;
}

const FilteredDataDisplay: React.FC<FilteredDataDisplayProps> = ({ projectFilter, serverNameFilter, appliedStartDate, appliedEndDate }) => {
  const [bookRecords, setBookRecords] = useState<BookResult[]>([]); // Changed to BookResult
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const getData = async () => {
      setLoading(true);
      setError(null);
      try {
        // Use fetchFilteredDataFromAPI to get book data
        const data = await fetchFilteredDataFromAPI({
          project: projectFilter,
          server: serverNameFilter, // Not directly used by Google Books API, but kept for interface consistency
          startDate: appliedStartDate,
          endDate: appliedEndDate,
        });
        setBookRecords(data);
      } catch (err) {
        setError(`Failed to fetch data: ${(err as Error).message}`);
      } finally {
        setLoading(false);
      }
    };

    getData();
  }, [projectFilter, serverNameFilter, appliedStartDate, appliedEndDate]);

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 200 }}>
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>Loading filtered data...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error">
        <AlertTitle>Error</AlertTitle>
        {error}
      </Alert>
    );
  }

  return (
    <Card>
      <CardContent>
        <Typography variant="h5" gutterBottom>
          Google Books API Results for "{projectFilter || 'programming'}"
        </Typography>
        {bookRecords.length === 0 ? (
          <Typography variant="body1" color="textSecondary">
            No book records found matching the selected filters or query.
          </Typography>
        ) : (
          <TableContainer component={Paper} sx={{ borderRadius: 2 }}>
            <Table stickyHeader aria-label="filtered data table">
              <TableHead>
                <TableRow>
                  <TableCell>Thumbnail</TableCell>
                  <TableCell>Title</TableCell>
                  <TableCell>Authors</TableCell>
                  <TableCell>Published Date</TableCell>
                  <TableCell>Description</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {bookRecords.map((record) => (
                  <TableRow key={record.id}>
                    <TableCell>
                      <img src={record.thumbnail} alt={record.title} style={{ width: 60, height: 80, borderRadius: 4 }} onError={(e) => { e.currentTarget.src = 'https://placehold.co/60x80/EEEEEE/AAAAAA?text=No+Image'; }} />
                    </TableCell>
                    <TableCell>{record.title}</TableCell>
                    <TableCell>{record.authors}</TableCell>
                    <TableCell>{record.publishedDate}</TableCell>
                    <TableCell>{record.description}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </CardContent>
    </Card>
  );
};


const App: React.FC = () => {
  const [endpoints, setEndpoints] = useState<Endpoint[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [initialFetchError, setInitialFetchError] = useState<string | null>(null);
  const [activeView, setActiveView] = useState<string>('table');
  const [startDateString, setStartDateString] = useState<string>('');
  const [endDateString, setEndDateString] = useState<string>('');
  const [appliedStartDate, setAppliedStartDate] = useState<Date | null>(null);
  const [appliedEndDate, setAppliedEndDate] = useState<Date | null>(null);
  const [serverNameFilter, setServerNameFilter] = useState<string>('');
  const [projectFilter, setProjectFilter] = useState<string>('');
  const [themeMode, setThemeMode] = useState<'light' | 'dark'>('dark');
  const [selectedTimeRange, setSelectedTimeRange] = useState<string>('');
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);
  const [showLogoutConfirm, setShowLogoutConfirm] = useState<boolean>(false);

  const [projectOptions, setProjectOptions] = useState<string[]>([]);
  const [serverOptions, setServerOptions] = useState<string[]>([]);


  const currentTheme = useMemo(() => themeMode === 'light' ? lightTheme : darkTheme, [themeMode]);

  const uniqueServerNames = useMemo(() => {
    if (projectFilter) {
      return serverOptions.filter(server =>
        server.includes(projectFilter)
      ).sort();
    }
    return serverOptions.sort();
  }, [projectFilter, serverOptions]);

  const uniqueProjectNames = useMemo(() => {
    return projectOptions.sort();
  }, [projectOptions]);

  // Effect to fetch initial endpoint data and filter options
  useEffect(() => {
    const fetchInitialData = async () => {
      setLoading(true);
      setInitialFetchError(null);
      try {
        // Attempt to fetch from Google Books API to simulate a "health check" for initial dashboard status
        const testQuery = 'React'; // A common query to test the API
        const testResponse = await axios.get(`${GOOGLE_BOOKS_API_URL}?q=${encodeURIComponent(testQuery)}&maxResults=1`);
        const apiIsHealthy = testResponse.status === 200 && testResponse.data.items && testResponse.data.items.length > 0;

        const now = new Date();
        const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
        const twoHoursAgo = new Date(now.getTime() - 2 * 60 * 60 * 1000);

        // Simulate endpoints based on API health
        const simulatedEndpoints: Endpoint[] = [
          {
            id: 'sim-ep-1', name: 'Books Search API', url: GOOGLE_BOOKS_API_URL, baselineLatency: 200,
            internalLatency: apiIsHealthy ? 150 : 500, externalLatency: apiIsHealthy ? 180 : 600,
            internalHealth: apiIsHealthy ? 'Green' : 'Red', externalHealth: apiIsHealthy ? 'Green' : 'Red',
            lastChecked: now.toISOString(),
            internalLatencyHistory: [
              { value: apiIsHealthy ? 140 : 450, timestamp: twoHoursAgo },
              { value: apiIsHealthy ? 160 : 550, timestamp: oneHourAgo },
              { value: apiIsHealthy ? 150 : 500, timestamp: now }
            ],
            externalLatencyHistory: [
              { value: apiIsHealthy ? 170 : 580, timestamp: twoHoursAgo },
              { value: apiIsHealthy ? 190 : 620, timestamp: oneHourAgo },
              { value: apiIsHealthy ? 180 : 600, timestamp: now }
            ],
            errorRate: apiIsHealthy ? 1 : 25, traffic: apiIsHealthy ? 1000 : 0,
            errorRateHistory: [
              { value: apiIsHealthy ? 0 : 20, timestamp: twoHoursAgo },
              { value: apiIsHealthy ? 2 : 30, timestamp: oneHourAgo },
              { value: apiIsHealthy ? 1 : 25, timestamp: now }
            ],
            serverName: 'Google API Server', projectName: 'Google Books'
          },
          {
            id: 'sim-ep-2', name: 'Another Simulated API', url: '/api/another', baselineLatency: 100,
            internalLatency: 90, externalLatency: 110, internalHealth: 'Green', externalHealth: 'Green',
            lastChecked: now.toISOString(),
            internalLatencyHistory: [
              { value: 85, timestamp: twoHoursAgo },
              { value: 95, timestamp: oneHourAgo },
              { value: 90, timestamp: now }
            ],
            externalLatencyHistory: [
              { value: 100, timestamp: twoHoursAgo },
              { value: 115, timestamp: oneHourAgo },
              { value: 110, timestamp: now }
            ],
            errorRate: 0, traffic: 500,
            errorRateHistory: [
              { value: 0, timestamp: twoHoursAgo },
              { value: 0, timestamp: oneHourAgo },
              { value: 0, timestamp: now }
            ],
            serverName: 'Internal Server', projectName: 'Internal Services'
          }
        ];
        setEndpoints(simulatedEndpoints);

        // Populate filter options based on the initial dummy data
        const projects = Array.from(new Set(simulatedEndpoints.map(ep => ep.projectName)));
        const servers = Array.from(new Set(simulatedEndpoints.map(ep => ep.serverName)));
        setProjectOptions(projects);
        setServerOptions(servers);

      } catch (error) {
        console.error("Failed to fetch initial data (simulating error):", error);
        setInitialFetchError(`Failed to connect to Google Books API: ${(error as Error).message}. Displaying simulated critical status.`);

        const now = new Date();
        const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
        const twoHoursAgo = new Date(now.getTime() - 2 * 60 * 60 * 1000);

        // Simulate critical endpoints if API fetch fails
        const simulatedCriticalEndpoints: Endpoint[] = [
          {
            id: 'sim-ep-1', name: 'Books Search API', url: GOOGLE_BOOKS_API_URL, baselineLatency: 200,
            internalLatency: 999, externalLatency: 999,
            internalHealth: 'Red', externalHealth: 'Red',
            lastChecked: now.toISOString(),
            internalLatencyHistory: [
              { value: 800, timestamp: twoHoursAgo },
              { value: 900, timestamp: oneHourAgo },
              { value: 999, timestamp: now }
            ],
            externalLatencyHistory: [
              { value: 850, timestamp: twoHoursAgo },
              { value: 950, timestamp: oneHourAgo },
              { value: 999, timestamp: now }
            ],
            errorRate: 100, traffic: 0,
            errorRateHistory: [
              { value: 50, timestamp: twoHoursAgo },
              { value: 75, timestamp: oneHourAgo },
              { value: 100, timestamp: now }
            ],
            serverName: 'Google API Server', projectName: 'Google Books'
          },
          {
            id: 'sim-ep-2', name: 'Another Simulated API', url: '/api/another', baselineLatency: 100,
            internalLatency: 150, externalLatency: 180, internalHealth: 'Yellow', externalHealth: 'Yellow',
            lastChecked: now.toISOString(),
            internalLatencyHistory: [
              { value: 120, timestamp: twoHoursAgo },
              { value: 140, timestamp: oneHourAgo },
              { value: 150, timestamp: now }
            ],
            externalLatencyHistory: [
              { value: 150, timestamp: twoHoursAgo },
              { value: 170, timestamp: oneHourAgo },
              { value: 180, timestamp: now }
            ],
            errorRate: 10, traffic: 200,
            errorRateHistory: [
              { value: 5, timestamp: twoHoursAgo },
              { value: 8, timestamp: oneHourAgo },
              { value: 10, timestamp: now }
            ],
            serverName: 'Internal Server', projectName: 'Internal Services'
          }
        ];
        setEndpoints(simulatedCriticalEndpoints);
        setProjectOptions(initialFilterOptions.projectNames);
        setServerOptions(initialFilterOptions.serverNames);
      } finally {
        setLoading(false);
      }
    };

    fetchInitialData();

  }, []);


  const totalEndpoints = endpoints.length;
  const healthyEndpoints = endpoints.filter(
    (e) => e.internalHealth === 'Green' && e.externalHealth === 'Green'
  ).length;
  const yellowEndpoints = endpoints.filter(
    (e) => e.internalHealth === 'Yellow' || e.externalHealth === 'Yellow'
  ).length;
  const redEndpoints = endpoints.filter(
    (e) => e.internalHealth === 'Red' || e.externalHealth === 'Red'
  ).length;

  const overallStatus = useMemo(() => {
    if (redEndpoints > 0) {
      return 'Critical';
    } else if (yellowEndpoints > 0) {
      return 'Degraded';
    } else if (healthyEndpoints === totalEndpoints && totalEndpoints > 0) {
      return 'Operational';
    } else {
      return 'Unknown';
    }
  }, [healthyEndpoints, yellowEndpoints, redEndpoints, totalEndpoints]);

  const getStatusProps = useCallback((health: 'Red' | 'Yellow' | 'Green' | 'Unknown') => {
    switch (health) {
      case 'Green':
        return { label: 'Healthy', color: 'success', icon: <CheckCircleOutlineIcon fontSize="small" /> };
      case 'Yellow':
        return { label: 'Degraded', color: 'warning', icon: <WarningAmberIcon fontSize="small" /> };
      case 'Red':
        return { label: 'Critical', color: 'error', icon: <ErrorOutlineIcon fontSize="small" /> };
      default:
        return { label: 'Unknown', color: 'default', icon: <HorizontalRuleIcon fontSize="small" /> };
    }
  }, []);

  const getTrendIcon = useCallback((trend: 'improving' | 'degrading' | 'stable' | 'unknown') => {
    switch (trend) {
      case 'improving':
        return <Tooltip title="Improving"><ArrowUpwardIcon color="success" fontSize="small" sx={{ ml: 0.5 }} /></Tooltip>;
      case 'degrading':
        return <Tooltip title="Degrading"><ArrowDownwardIcon color="error" fontSize="small" sx={{ ml: 0.5 }} /></Tooltip>;
      case 'stable':
        return <Tooltip title="Stable"><HorizontalRuleIcon color="action" fontSize="small" sx={{ ml: 0.5 }} /></Tooltip>;
      default:
        return null;
    }
  }, []);

  const handleApplyFilter = () => {
    const now = new Date();
    let newAppliedStartDate: Date | null = null;
    let newAppliedEndDate: Date | null = null;

    if (selectedTimeRange) {
      newAppliedEndDate = now;
      switch (selectedTimeRange) {
        case '1min':
          newAppliedStartDate = new Date(now.getTime() - 1 * 60 * 1000);
          break;
        case '3min':
          newAppliedStartDate = new Date(now.getTime() - 3 * 60 * 60 * 1000);
          break;
        case '5min':
          newAppliedStartDate = new Date(now.getTime() - 5 * 60 * 1000);
          break;
        case '1hour':
          newAppliedStartDate = new Date(now.getTime() - 60 * 60 * 1000);
          break;
        case '3hours':
          newAppliedStartDate = new Date(now.getTime() - 3 * 60 * 60 * 1000);
          break;
        case '1day':
          newAppliedStartDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);
          break;
        case '1week':
          newAppliedStartDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
          break;
        case '1month':
          newAppliedStartDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
          break;
        default:
          break;
      }
      setStartDateString('');
      setEndDateString('');
    } else {
      if (startDateString) {
        newAppliedStartDate = new Date(startDateString);
        newAppliedStartDate.setHours(0, 0, 0, 0);
      }
      if (endDateString) {
        newAppliedEndDate = new Date(endDateString);
        newAppliedEndDate.setHours(23, 59, 59, 999);
      }
    }

    setAppliedStartDate(newAppliedStartDate);
    setAppliedEndDate(newAppliedEndDate);
  };

  const handleClearFilters = () => {
    setStartDateString('');
    setEndDateString('');
    setAppliedStartDate(null);
    setAppliedEndDate(null);
    setServerNameFilter('');
    setProjectFilter('');
    setSelectedTimeRange('');
  };

  const filteredEndpointsByProject = useMemo(() => {
    if (!projectFilter) {
      return endpoints;
    }
    return endpoints.filter(endpoint => endpoint.projectName === projectFilter);
  }, [endpoints, projectFilter]);

  const filteredEndpointsByServer = useMemo(() => {
    if (!serverNameFilter) {
      return filteredEndpointsByProject;
    }
    return filteredEndpointsByProject.filter(endpoint => endpoint.serverName === serverNameFilter);
  }, [filteredEndpointsByProject, serverNameFilter]);

  const displayEndpoints = useMemo(() => {
    let currentEndpoints = filteredEndpointsByServer;

    if (appliedStartDate && appliedEndDate) {
      currentEndpoints = currentEndpoints.filter(endpoint =>
        endpoint.lastChecked &&
        new Date(endpoint.lastChecked).getTime() >= appliedStartDate.getTime() &&
        new Date(endpoint.lastChecked).getTime() <= appliedEndDate.getTime()
      );
    }
    return currentEndpoints;
  }, [filteredEndpointsByServer, appliedStartDate, appliedEndDate]);


  const toggleTheme = () => {
    setThemeMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));
  };

  const handleLoginSuccess = () => {
    setIsLoggedIn(true);
  };

  const handleLogoutRequest = () => {
    setShowLogoutConfirm(true);
  };

  const handleConfirmLogout = () => {
    setIsLoggedIn(false);
    setActiveView('table');
    handleClearFilters();
    setShowLogoutConfirm(false);
  };

  const handleCancelLogout = () => {
    setShowLogoutConfirm(false);
  };

  if (loading) {
    return (
      <ThemeProvider theme={currentTheme}>
        <CssBaseline />
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', flexDirection: 'column' }}>
          <CircularProgress size={60} sx={{ mb: 2 }} />
          <Typography variant="h6" color="textSecondary">Loading API Status...</Typography>
        </Box>
      </ThemeProvider>
    );
  }

  if (!isLoggedIn) {
    return (
      <ThemeProvider theme={currentTheme}>
        <CssBaseline />
        <LoginPage onLoginSuccess={handleLoginSuccess} themeMode={themeMode} />
      </ThemeProvider>
    );
  }

  return (
    <ThemeProvider theme={currentTheme}>
      <CssBaseline />
      <Box sx={{ display: 'flex', minHeight: '100vh', bgcolor: 'background.default' }}>
        <SidebarNav onSelectView={setActiveView} activeView={activeView} themeMode={themeMode} onLogoutRequest={handleLogoutRequest} />
        <Container maxWidth="xl" sx={{ flexGrow: 1, p: 3, overflowY: 'auto' }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
            <Typography variant="h4" component="h1" gutterBottom sx={{ fontWeight: 'bold', color: currentTheme.palette.text.primary }}>
              API Monitoring Dashboard
            </Typography>
            <IconButton onClick={toggleTheme} color="inherit">
              {themeMode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}
            </IconButton>
          </Box>

          {initialFetchError && (
            <Alert severity="error" sx={{ mb: 4, width: '100%' }}>
              <AlertTitle>API Connection Error</AlertTitle>
              {initialFetchError}
            </Alert>
          )}

          {/* Conditional rendering of filter options */}
          {(activeView === 'table' || activeView === 'summary' || activeView === 'error_trends' || activeView === 'filtered_data') && (
            <Box sx={{ display: 'flex', gap: 1, mb: 4, alignItems: 'center', flexWrap: 'wrap' }}>
              {/* Project Dropdown */}
              <FormControl sx={{ minWidth: 120 }}>
                <InputLabel id="project-select-label">Project</InputLabel>
                <Select
                  labelId="project-select-label"
                  id="project-select"
                  value={projectFilter}
                  label="Project"
                  onChange={(e) => {
                    setProjectFilter(e.target.value as string);
                    setServerNameFilter('');
                  }}
                  sx={{ borderRadius: 2 }}
                >
                  <MenuItem value="">
                    <em>All Projects</em>
                  </MenuItem>
                  {uniqueProjectNames.map(name => (
                    <MenuItem key={name} value={name}>{name}</MenuItem>
                  ))}
                </Select>
              </FormControl>

              {/* Server Dropdown */}
              <FormControl sx={{ minWidth: 120 }}>
                <InputLabel id="server-name-select-label">Server</InputLabel>
                <Select
                  labelId="server-name-select-label"
                  id="server-name-select"
                  value={serverNameFilter}
                  label="Server"
                  onChange={(e) => setServerNameFilter(e.target.value as string)}
                  sx={{ borderRadius: 2 }}
                >
                  <MenuItem value="">
                    <em>All Servers</em>
                  </MenuItem>
                  {uniqueServerNames.map(name => (
                    <MenuItem key={name} value={name}>{name}</MenuItem>
                  ))}
                </Select>
              </FormControl>

              {/* Time Range Dropdown */}
              <FormControl sx={{ minWidth: 130 }}>
                <InputLabel id="time-range-select-label">Time Range</InputLabel>
                <Select
                  labelId="time-range-select-label"
                  id="time-range-select"
                  value={selectedTimeRange}
                  label="Time Range"
                  onChange={(e) => { setSelectedTimeRange(e.target.value as string); }}
                  sx={{ borderRadius: 2 }}
                >
                  <MenuItem value="">
                    <em>None</em>
                  </MenuItem>
                  <MenuItem value="1min">Last 1 min</MenuItem>
                  <MenuItem value="3min">Last 3 min</MenuItem>
                  <MenuItem value="5min">Last 5 min</MenuItem>
                  <MenuItem value="1hour">Last 1 hour</MenuItem>
                  <MenuItem value="3hours">Last 3 hours</MenuItem>
                  <MenuItem value="1day">Last 1 Day</MenuItem>
                  <MenuItem value="1week">Last 1 Week</MenuItem>
                  <MenuItem value="1month">Last 1 Month</MenuItem>
                </Select>
              </FormControl>

              {/* Start Date */}
              <TextField
                label="From Date"
                type="date"
                value={startDateString}
                onChange={(e) => { setStartDateString(e.target.value); setSelectedTimeRange(''); }}
                InputLabelProps={{ shrink: true }}
                inputProps={{ id: 'startDateInput' }}
              />
              {/* End Date */}
              <TextField
                label="To Date"
                type="date"
                value={endDateString}
                onChange={(e) => { setEndDateString(e.target.value); setSelectedTimeRange(''); }}
                InputLabelProps={{ shrink: true }}
                inputProps={{ id: 'endDateInput' }}
              />
              <Button
                variant="contained"
                onClick={handleApplyFilter}
                sx={{ height: '40px', px: 2, borderRadius: 2 }}
              >
                Apply
              </Button>
              <Button
                variant="outlined"
                onClick={handleClearFilters}
                sx={{ height: '40px', px: 2, borderRadius: 2 }}
              >
                Clear
              </Button>
            </Box>
          )}

          {activeView === 'summary' && (
            <OverallSummaryStatus
              totalEndpoints={displayEndpoints.length}
              healthyEndpoints={displayEndpoints.filter(
                (e) => e.internalHealth === 'Green' && e.externalHealth === 'Green'
              ).length}
              yellowEndpoints={displayEndpoints.filter(
                (e) => e.internalHealth === 'Yellow' || e.externalHealth === 'Yellow'
              ).length}
              redEndpoints={displayEndpoints.filter(
                (e) => e.internalHealth === 'Red' || e.externalHealth === 'Red'
              ).length}
              overallStatus={overallStatus}
            />
          )}

          {activeView === 'table' && (
            <IndividualEndpointStatusTable
              endpoints={displayEndpoints}
              getStatusProps={getStatusProps}
              getTrendIcon={getTrendIcon}
              appliedStartDate={appliedStartDate}
              appliedEndDate={appliedEndDate}
              themeMode={themeMode}
            />
          )}

          {activeView === 'error_trends' && (
            <ErrorRateTrends
              endpoints={displayEndpoints}
              appliedStartDate={appliedStartDate}
              appliedEndDate={appliedEndDate}
              themeMode={themeMode}
            />
          )}

          {activeView === 'filtered_data' && (
            <FilteredDataDisplay
              projectFilter={projectFilter}
              serverNameFilter={serverNameFilter}
              appliedStartDate={appliedStartDate}
              appliedEndDate={appliedEndDate}
            />
          )}

          {activeView === 'notifications' && <NotificationAlerting />}
          {activeView === 'selfHealing' && <AutomatedSelfHealingActions />}
          {activeView === 'user_profile' && <UserProfileTable />}
        </Container>
      </Box>

      {/* Logout Confirmation Dialog */}
      <Dialog
        open={showLogoutConfirm}
        onClose={handleCancelLogout}
        aria-labelledby="logout-dialog-title"
        aria-describedby="logout-dialog-description"
      >
        <DialogTitle id="logout-dialog-title">{"Confirm Logout"}</DialogTitle>
        <DialogContent>
          <Typography id="logout-dialog-description">
            Are you sure you want to log out?
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCancelLogout} color="primary">
            Cancel
          </Button>
          <Button onClick={handleConfirmLogout} color="primary" autoFocus>
            Logout
          </Button>
        </DialogActions>
      </Dialog>
    </ThemeProvider>
  );
};

export default App;

import React, { useState, useEffect } from 'react';
import {
  AppBar,
  Toolbar,
  Typography,
  Container,
  Paper,
  CssBaseline,
  ThemeProvider,
  createTheme,
  Box,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Divider,
  Button,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  TextField,
  Avatar,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TableSortLabel,
  TablePagination,
  IconButton,
  Tooltip,
} from '@mui/material';

import {
  Dashboard as DashboardIcon,
  TableChart as TableChartIcon,
  Schedule as ScheduleIcon,
  Error as ErrorIcon,
  Healing as HealingIcon,
  Notifications as NotificationsIcon,
  Brightness4 as Brightness4Icon,
  Brightness7 as Brightness7Icon,
  Download as DownloadIcon,
  Logout as LogoutIcon,
  Menu as MenuIcon,
  Search as SearchIcon,
  AccountCircle as AccountCircleIcon,
  FilterList as FilterListIcon,
} from '@mui/icons-material';

import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts';

import axios from 'axios';
import { saveAs } from 'file-saver';
import { format } from 'date-fns';

// Define the data models for type safety
interface MonitorDataResult {
  data: {
    status: string;
    payload: {
      fromDateTime: string;
      toDateTime: string;
      totalHits: number;
      successHits: number;
      errorHits: number;
      averageLatency: number;
      apiMonitorData: ApiMonitorDataItem[];
      errorCodes?: { resultCode: string; count: number }[];
    };
  };
}

interface ApiMonitorDataItem {
  endpointName: string;
  projectName: string;
  status: number;
  timestamp: string;
  latency: number;
  requestBody: string;
  responseBody: string;
}

// ===================================================================================================================
// DUMMY DATA AND CONFIGURATION
// ===================================================================================================================

// Hardcoded project names for the filter dropdown
const projectNames = ['Project Alpha', 'Project Beta', 'Project Gamma'];

// ===================================================================================================================
// THEME
// ===================================================================================================================

const getTheme = (mode: 'light' | 'dark') =>
  createTheme({
    palette: {
      mode,
      primary: {
        main: '#3f51b5',
      },
      secondary: {
        main: '#f50057',
      },
      background: {
        default: mode === 'light' ? '#f4f6f8' : '#121212',
        paper: mode === 'light' ? '#ffffff' : '#1e1e1e',
      },
    },
    typography: {
      fontFamily: 'Roboto, Arial, sans-serif',
      h5: {
        fontWeight: 600,
      },
    },
    components: {
      MuiDrawer: {
        styleOverrides: {
          paper: {
            backgroundColor: mode === 'light' ? '#ffffff' : '#1e1e1e',
          },
        },
      },
    },
  });

// ===================================================================================================================
// LOGIN PAGE
// ===================================================================================================================
const LoginPage = ({ onLogin }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLogin = () => {
    if (username === 'user' && password === 'password') {
      onLogin();
    } else {
      setError('Invalid username or password');
    }
  };

  return (
    <Container component="main" maxWidth="xs" sx={{ height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
      <Paper elevation={3} sx={{ padding: 4, display: 'flex', flexDirection: 'column', alignItems: 'center', width: '100%', borderRadius: 2 }}>
        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>
          <AccountCircleIcon />
        </Avatar>
        <Typography component="h1" variant="h5" sx={{ mb: 2 }}>
          API Monitoring Dashboard
        </Typography>
        <TextField
          margin="normal"
          required
          fullWidth
          label="Username"
          name="username"
          autoFocus
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <TextField
          margin="normal"
          required
          fullWidth
          name="password"
          label="Password"
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        {error && (
          <Typography color="error" sx={{ mt: 2 }}>
            {error}
          </Typography>
        )}
        <Button
          type="submit"
          fullWidth
          variant="contained"
          sx={{ mt: 3, mb: 2 }}
          onClick={handleLogin}
        >
          Sign In
        </Button>
      </Paper>
    </Container>
  );
};

// ===================================================================================================================
// ERROR TRENDS COMPONENT (UPDATED)
// ===================================================================================================================
const ErrorRateTrends = ({ errorCodes }) => {
  return (
    <Paper sx={{ p: 3, borderRadius: 2, height: '100%' }}>
      <Typography variant="h6" gutterBottom>
        Error Code Trends
      </Typography>
      <Box sx={{ height: 400 }}>
        {errorCodes && errorCodes.length > 0 ? (
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={errorCodes}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="resultCode" />
              <YAxis />
              <RechartsTooltip />
              <Legend />
              <Bar dataKey="count" fill="#8884d8" name="Error Count" />
            </BarChart>
          </ResponsiveContainer>
        ) : (
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%' }}>
            <Typography variant="body1" color="text.secondary">
              No error data available.
            </Typography>
          </Box>
        )}
      </Box>
    </Paper>
  );
};

// ===================================================================================================================
// API MONITOR DATA TABLE
// ===================================================================================================================
interface HeadCell {
  id: keyof ApiMonitorDataItem;
  label: string;
}

const headCells: HeadCell[] = [
  { id: 'endpointName', label: 'Endpoint Name' },
  { id: 'projectName', label: 'Project Name' },
  { id: 'status', label: 'Status' },
  { id: 'timestamp', label: 'Timestamp' },
  { id: 'latency', label: 'Latency (ms)' },
];

function stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {
  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);
  stabilizedThis.sort((a, b) => {
    const order = comparator(a[0], b[0]);
    if (order !== 0) {
      return order;
    }
    return a[1] - b[1];
  });
  return stabilizedThis.map((el) => el[0]);
}

type Order = 'asc' | 'desc';

function getComparator<Key extends keyof any>(
  order: Order,
  orderBy: Key,
): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {
  return order === 'desc'
    ? (a, b) => descendingComparator(a, b, orderBy)
    : (a, b) => -descendingComparator(a, b, orderBy);
}

function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {
  if (b[orderBy] < a[orderBy]) {
    return -1;
  }
  if (b[orderBy] > a[orderBy]) {
    return 1;
    }
    return 0;
}

const ApiMonitorDataTable = ({ data, loading, error, onDownload }) => {
  const [order, setOrder] = useState<Order>('asc');
  const [orderBy, setOrderBy] = useState<keyof ApiMonitorDataItem>('timestamp');
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const handleRequestSort = (property: keyof ApiMonitorDataItem) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const sortedData = stableSort(data, getComparator(order, orderBy));

  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - data.length) : 0;

  return (
    <Paper sx={{ p: 3, borderRadius: 2 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h6">API Monitor Data</Typography>
        <Tooltip title="Download as CSV">
          <Button
            variant="contained"
            color="primary"
            startIcon={<DownloadIcon />}
            onClick={onDownload}
            disabled={loading || data.length === 0}
          >
            Export
          </Button>
        </Tooltip>
      </Box>

      {loading && <Typography>Loading...</Typography>}
      {error && <Typography color="error">Error: {error}</Typography>}
      {!loading && !error && data.length === 0 && (
        <Typography>No data to display. Please apply filters.</Typography>
      )}

      {!loading && !error && data.length > 0 && (
        <TableContainer>
          <Table stickyHeader aria-label="sticky table">
            <TableHead>
              <TableRow>
                {headCells.map((headCell) => (
                  <TableCell
                    key={headCell.id}
                    sortDirection={orderBy === headCell.id ? order : false}
                  >
                    <TableSortLabel
                      active={orderBy === headCell.id}
                      direction={orderBy === headCell.id ? order : 'asc'}
                      onClick={() => handleRequestSort(headCell.id)}
                    >
                      {headCell.label}
                    </TableSortLabel>
                  </TableCell>
                ))}
              </TableRow>
            </TableHead>
            <TableBody>
              {sortedData
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map((row, index) => (
                  <TableRow hover role="checkbox" tabIndex={-1} key={index}>
                    <TableCell>{row.endpointName}</TableCell>
                    <TableCell>{row.projectName}</TableCell>
                    <TableCell>
                      <Box
                        component="span"
                        sx={{
                          color: row.status >= 200 && row.status < 300 ? 'success.main' : 'error.main',
                          fontWeight: 'bold',
                        }}
                      >
                        {row.status}
                      </Box>
                    </TableCell>
                    <TableCell>{row.timestamp}</TableCell>
                    <TableCell>
                      <Box
                        component="span"
                        sx={{
                          color: row.latency > 500 ? 'error.main' : 'success.main',
                          fontWeight: 'bold',
                        }}
                      >
                        {row.latency}
                      </Box>
                    </TableCell>
                  </TableRow>
                ))}
              {emptyRows > 0 && (
                <TableRow style={{ height: 53 * emptyRows }}>
                  <TableCell colSpan={6} />
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>
      )}
      <TablePagination
        rowsPerPageOptions={[10, 25, 100]}
        component="div"
        count={data.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Paper>
  );
};


// ===================================================================================================================
// MAIN APP COMPONENT
// ===================================================================================================================

export default function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [mode, setMode] = useState<'light' | 'dark'>('light');
  const [mobileOpen, setMobileOpen] = useState(false);
  const [selectedView, setSelectedView] = useState('dashboard');
  const [apiMonitorTableData, setApiMonitorTableData] = useState<MonitorDataResult['data']['payload'] | null>(null);
  const [apiMonitorTableLoading, setApiMonitorTableLoading] = useState(false);
  const [apiMonitorTableError, setApiMonitorTableError] = useState<string | null>(null);

  // Filter state
  const [projectNameFilter, setProjectNameFilter] = useState('');
  const [timeRangeFilter, setTimeRangeFilter] = useState('last7days');
  const [fromDateFilter, setFromDateFilter] = useState('');
  const [toDateFilter, setToDateFilter] = useState('');

  // Handle light/dark mode toggle
  const theme = React.useMemo(() => getTheme(mode), [mode]);
  const handleThemeChange = () => {
    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));
  };

  // Handle drawer for mobile
  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  // Handle API call with filters
  const handleApplyFilter = async () => {
    setApiMonitorTableLoading(true);
    setApiMonitorTableError(null);
    setApiMonitorTableData(null);

    const fromDate = fromDateFilter || new Date();
    const toDate = toDateFilter || new Date();

    const fromDateString = format(new Date(fromDate), 'yyyy-MM-dd HH:mm:ss');
    const toDateString = format(new Date(toDate), 'yyyy-MM-dd HH:mm:ss');
    const projectName = projectNameFilter || 'All';
    const timeRange = timeRangeFilter;

    try {
      const response = await axios.get<MonitorDataResult>(`https://localhost:7278/Monitor/GetDataFromAppInsights`, {
        params: {
          FromDateTime: fromDateString,
          ToDateTime: toDateString,
          ProjectName: projectName,
          TimeRange: timeRange,
        },
      });

      // The backend response is an object with a 'data' property
      // We need to access response.data.data.payload
      if (response.data && response.data.data && response.data.data.payload) {
        setApiMonitorTableData(response.data.data.payload);
      } else {
        setApiMonitorTableData({
          fromDateTime: '',
          toDateTime: '',
          totalHits: 0,
          successHits: 0,
          errorHits: 0,
          averageLatency: 0,
          apiMonitorData: [],
          errorCodes: [],
        });
      }

    } catch (err) {
      setApiMonitorTableError('Failed to fetch data. Please check the API endpoint and try again.');
    } finally {
      setApiMonitorTableLoading(false);
    }
  };

  // Handle CSV export
  const handleDownloadCsv = () => {
    if (!apiMonitorTableData || !apiMonitorTableData.apiMonitorData) return;

    const data = apiMonitorTableData.apiMonitorData;
    const header = Object.keys(data[0]).join(',');
    const rows = data.map(item => Object.values(item).join(','));
    const csvString = [header, ...rows].join('\n');
    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, 'api_monitor_data.csv');
  };

  // Log out function
  const handleLogout = () => {
    setIsAuthenticated(false);
  };

  // Sidebar navigation items
  const sidebarItems = [
    { text: 'Endpoint Table', icon: <TableChartIcon />, view: 'table' },
    { text: 'Error Trends', icon: <ErrorIcon />, view: 'errorTrends' },
    { text: 'Overall Summary', icon: <DashboardIcon />, view: 'summary' },
    { text: 'Notifications', icon: <NotificationsIcon />, view: 'notifications' },
    { text: 'Self-Healing', icon: <HealingIcon />, view: 'selfHealing' },
  ];

  // The sidebar content
  const drawer = (
    <div>
      <Toolbar />
      <Divider />
      <List>
        {sidebarItems.map((item) => (
          <ListItem
            button
            key={item.text}
            onClick={() => setSelectedView(item.view)}
            sx={{
              backgroundColor: selectedView === item.view ? theme.palette.action.selected : 'inherit',
            }}
          >
            <ListItemIcon>{item.icon}</ListItemIcon>
            <ListItemText primary={item.text} />
          </ListItem>
        ))}
      </List>
      <Divider />
      <List>
        <ListItem button onClick={handleLogout}>
          <ListItemIcon>
            <LogoutIcon />
          </ListItemIcon>
          <ListItemText primary="Logout" />
        </ListItem>
      </List>
    </div>
  );

  if (!isAuthenticated) {
    return <LoginPage onLogin={() => setIsAuthenticated(true)} />;
  }

  // Define the main content based on the selected view
  let mainContent;
  if (selectedView === 'table') {
    mainContent = (
      <ApiMonitorDataTable
        data={apiMonitorTableData?.apiMonitorData || []}
        loading={apiMonitorTableLoading}
        error={apiMonitorTableError}
        onDownload={handleDownloadCsv}
      />
    );
  } else if (selectedView === 'errorTrends') {
    mainContent = <ErrorRateTrends errorCodes={apiMonitorTableData?.errorCodes || []} />;
  } else if (selectedView === 'summary') {
    mainContent = (
      <Paper sx={{ p: 3, borderRadius: 2 }}>
        <Typography variant="h6">Overall Summary</Typography>
        <Typography variant="body1" sx={{ mt: 2 }}>
          Total Hits: {apiMonitorTableData?.totalHits ?? 'N/A'}
        </Typography>
        <Typography variant="body1">
          Success Hits: {apiMonitorTableData?.successHits ?? 'N/A'}
        </Typography>
        <Typography variant="body1">
          Error Hits: {apiMonitorTableData?.errorHits ?? 'N/A'}
        </Typography>
        <Typography variant="body1">
          Average Latency: {apiMonitorTableData?.averageLatency ?? 'N/A'} ms
        </Typography>
      </Paper>
    );
  } else if (selectedView === 'notifications') {
    mainContent = (
      <Paper sx={{ p: 3, borderRadius: 2 }}>
        <Typography variant="h6">Notifications</Typography>
        <Typography sx={{ mt: 2 }}>
          This view would show a feed of alerts and notifications, such as high error rates or
          latency spikes.
        </Typography>
      </Paper>
    );
  } else if (selectedView === 'selfHealing') {
    mainContent = (
      <Paper sx={{ p: 3, borderRadius: 2 }}>
        <Typography variant="h6">Self-Healing Actions</Typography>
        <Typography sx={{ mt: 2 }}>
          This view would detail automated actions taken by the system, like restarting
          a service or scaling resources in response to an issue.
        </Typography>
      </Paper>
    );
  } else { // Default to dashboard view on initial load
    mainContent = (
      <Paper sx={{ p: 3, borderRadius: 2 }}>
        <Typography variant="h6">Dashboard Home</Typography>
        <Typography sx={{ mt: 2 }}>
          Welcome to the API Monitoring Dashboard. Use the navigation on the left to explore the data.
        </Typography>
      </Paper>
    );
  }

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Box sx={{ display: 'flex', height: '100vh', width: '100vw' }}>
        {/* App Bar */}
        <AppBar position="fixed" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>
          <Toolbar>
            <IconButton
              color="inherit"
              aria-label="open drawer"
              edge="start"
              onClick={handleDrawerToggle}
              sx={{ mr: 2, display: { sm: 'none' } }}
            >
              <MenuIcon />
            </IconButton>
            <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
              API Monitoring Dashboard
            </Typography>
            <IconButton color="inherit" onClick={handleThemeChange}>
              {mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}
            </IconButton>
          </Toolbar>
        </AppBar>

        {/* Sidebar Navigation */}
        <Box
          component="nav"
          sx={{ width: { sm: 240 }, flexShrink: { sm: 0 } }}
          aria-label="mailbox folders"
        >
          <Drawer
            variant="temporary"
            open={mobileOpen}
            onClose={handleDrawerToggle}
            ModalProps={{
              keepMounted: true, // Better open performance on mobile.
            }}
            sx={{
              display: { xs: 'block', sm: 'none' },
              '& .MuiDrawer-paper': { boxSizing: 'border-box', width: 240 },
            }}
          >
            {drawer}
          </Drawer>
          <Drawer
            variant="permanent"
            sx={{
              display: { xs: 'none', sm: 'block' },
              '& .MuiDrawer-paper': { boxSizing: 'border-box', width: 240 },
            }}
            open
          >
            {drawer}
          </Drawer>
        </Box>

        {/* Main Content Area */}
        <Box
          component="main"
          sx={{
            flexGrow: 1,
            p: 3,
            width: { sm: `calc(100% - 240px)` },
            mt: 8, // To account for the app bar
            display: 'flex',
            flexDirection: 'column',
          }}
        >
          {/* Filter Bar */}
          <Paper sx={{ p: 3, mb: 3, borderRadius: 2 }}>
            <Typography variant="h6" gutterBottom>
              Filters
            </Typography>
            <Box
              sx={{
                display: 'flex',
                flexDirection: { xs: 'column', md: 'row' },
                gap: 2,
                alignItems: { xs: 'stretch', md: 'center' },
              }}
            >
              <FormControl sx={{ flex: 1, minWidth: 200 }}>
                <InputLabel id="project-name-label">Project Name</InputLabel>
                <Select
                  labelId="project-name-label"
                  id="project-name-select"
                  value={projectNameFilter}
                  label="Project Name"
                  onChange={(e) => setProjectNameFilter(e.target.value as string)}
                >
                  <MenuItem value="">All</MenuItem>
                  {projectNames.map((name) => (
                    <MenuItem key={name} value={name}>
                      {name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <FormControl sx={{ flex: 1, minWidth: 200 }}>
                <InputLabel id="time-range-label">Time Range</InputLabel>
                <Select
                  labelId="time-range-label"
                  id="time-range-select"
                  value={timeRangeFilter}
                  label="Time Range"
                  onChange={(e) => setTimeRangeFilter(e.target.value)}
                >
                  <MenuItem value="last7days">Last 7 days</MenuItem>
                  <MenuItem value="last30days">Last 30 days</MenuItem>
                  <MenuItem value="last24hours">Last 24 hours</MenuItem>
                  <MenuItem value="custom">Custom</MenuItem>
                </Select>
              </FormControl>

              {timeRangeFilter === 'custom' && (
                <>
                  <TextField
                    label="From Date"
                    type="datetime-local"
                    sx={{ flex: 1, minWidth: 200 }}
                    InputLabelProps={{ shrink: true }}
                    value={fromDateFilter}
                    onChange={(e) => setFromDateFilter(e.target.value)}
                  />
                  <TextField
                    label="To Date"
                    type="datetime-local"
                    sx={{ flex: 1, minWidth: 200 }}
                    InputLabelProps={{ shrink: true }}
                    value={toDateFilter}
                    onChange={(e) => setToDateFilter(e.target.value)}
                  />
                </>
              )}

              <Button
                variant="contained"
                color="primary"
                onClick={handleApplyFilter}
                startIcon={<FilterListIcon />}
                sx={{ flex: 1, minWidth: 150 }}
              >
                Apply
              </Button>
            </Box>
          </Paper>

          {/* Main Content Render */}
          <Box sx={{ flexGrow: 1 }}>{mainContent}</Box>
        </Box>
      </Box>
    </ThemeProvider>
  );
}
